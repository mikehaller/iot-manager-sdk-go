openapi: 3.0.1
info:
  description: |-
    The Bosch IoT Manager REST API provides the full functionality of the service, including:

    &middot;    Retrieving devices and features; adding and modifying device-specific properties and attributes

    &middot;    A simple device registration mechanism

    &middot;    All grouping capabilities - listing, creating, modifying and deleting directories and tags

    &middot;    The complete mass management experience, which allows full control over tasks and rules


    Find out more details in our [documentation](https://docs.bosch-iot-suite.com/manager/).
  title: Bosch IoT Manager API
  version: 1.0.0
servers:
- url: https://manager.eu-1.bosch-iot-suite.com/api/1
security:
- bearerAuth: []
- refreshToken: []
- SuiteAuth: []
paths:
  /mme/rules:
    get:
      description: ' Retrieve all available Rules that satisfy the specified filtering
        criteria.'
      operationId: rules
      parameters:
      - description: 'An RQL filter over the Rule attributes.<h5></tt><br/>The attribute
          names in the filtering conditions can be some of:</h5> <ui><tt><li/><b>state</b>
          - integer value corresponding to the Rule state as follows: </tt> <br/>
          <tt>0 - DEFINED </tt> <br/><tt>1 - ENABLED </tt><br/><tt> 2 - DISABLED</tt>
          <br/><tt>3 - FAILED_TO_ENABLE</tt> <li/><tt><b>stateDescription</b> - string
          value corresponding to the state description. </tt><li/><tt><b> involvedCount</b>
          - integer value corresponding to the the number of involved Devices in the
          Rule.</tt> <li/><tt><b> successCount</b> - integer value corresponding to
          the the number of successfully finished Devices in the Rule.</tt><li/><tt><b>warningCount</b>
          - integer value corresponding to the the number of Devices finished with
          warning in the Rule. </tt><li/><tt><b> errorCount</b> - integer value corresponding
          the the number of Devices finished with error in the Rule.</tt> <li/><tt><b>cancelCount</b>
          - integer value corresponding to the the number of Devices finished with
          warning in the Rule.</tt><li/><tt><b>nextTimeTrigger</b> - corresponds to
          the next trigger time (in milliseconds since 1 Jan 1970) if the Rule has
          a timer trigger.</tt> <li/><tt><b>ruleId</b> - string value corresponding
          to the Rule id. </tt><li/><tt><b>user</b> - string value corresponding to
          the user name of the user that has created the Rule.<li/> <tt><b>displayName</b>
          - string value corresponding to the Rule display name. </tt><h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note:
          When using filter operations, only Rules with the specified properties are
          returned.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(state,0)</tt></li><li><tt>and(eq(involvedCount,2),eq(state,0))</tt></li></ui>'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: <p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size})
          Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id})
          Start the search from the cursor location. Specify the cursor ID without
          quotation marks. Cursor IDs are given in search responses and mark the position
          after the last entry of the previous search. The meaning of cursor IDs is
          unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The Rule was successfully retrieved.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve all available Rules
      tags:
      - Rules
    post:
      description: Create a Rule with the specified attributes - <code>displayName</code>,
        <code>scope</code>, <code>trigger</code>, <code>options</code>, and <code>action</code>.
        The <code>displayName</code>, <code>scope</code>, <code>trigger</code>, and
        <code>action</code> are required.
      operationId: createRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInfo'
        description: Creates new rule
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleStatusInfo'
          description: The Rule was successfully created.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Create a Rule
      tags:
      - Rules
  /mme/rules/actions:
    get:
      description: Retrieve all available registered Action provider types. Groovy
        Script action type is available by default.
      operationId: getActionTypes
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains Action types.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve all available registered Action types
      tags:
      - Rules
  /mme/rules/actions/{actionType}:
    get:
      description: Retrieve JSON schema format metadata specified by the given <code>actionType</code>,
        describing the input needed on Rule activation.
      operationId: getActionDefMetada
      parameters:
      - explode: false
        in: path
        name: actionType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains JSON schema format
            metadata.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Action Type was not
            found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: 'Retrieve metadata in JSON schema format '
      tags:
      - Rules
  /mme/rules/devices/{deviceId}:
    get:
      description: 'Retrieve all Rules involving a particular Device in which the
        latter satisfies the applied state filter.<p> <h4>Available stateFilter values:</h4>
        <ui><li><tt> FINISHED_SUCCESS(0) : Retrieve only Devices that have finished
        with a success state</tt></li>  <li><tt> FINISHED_WARNING(1) : Retrieve only
        Devices that have finished the execution with a warning state</tt></li> <li><tt>
        FINISHED_ERROR(2) : Retrieve only Devices that have finished the execution
        with an error state</tt></li> <li><tt> FINISHED_CANCELED(3) : Retrieve only
        devices that have finished the execution with a canceled state</tt></li> <li><tt>
        RUNNING(4) : Retrieve only Devices that have a running state</tt></li>  <li><tt>FINISHED(64):
        This value unites all FINISHED_xxx values and could be used only as a parameter
        for filtering</tt></li><li><tt>ANY(128): Retrieve all involved devices, regardless
        of the completion state'
      operationId: listRulesForDevice
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: stateFilter
        required: false
        schema:
          enum:
          - FINISHED_SUCCESS
          - FINISHED_WARNING
          - FINISHED_ERROR
          - FINISHED_CANCELED
          - RUNNING
          - FINISHED
          - ANY
          type: string
        style: form
      - description: <p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size})
          Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id})
          Start the search from the cursor location. Specify the cursor ID without
          quotation marks. Cursor IDs are given in search responses and mark the position
          after the last entry of the previous search. The meaning of cursor IDs is
          unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains a list of <code>DeviceRuleStatus</code>.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Device with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve all Rules involving a particular Device
      tags:
      - Rules
  /mme/rules/trigger/types:
    get:
      description: Retrieve all available registered Trigger Provider types.
      operationId: triggerTypes
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains Trigger types.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve all available registered Trigger types
      tags:
      - Rules
  /mme/rules/trigger/types/{triggerType}/eventsMetadata:
    get:
      description: Retrieve a JSON schema describing a tree-structured collection
        of all possible events delivered by this Trigger type.
      operationId: eventMetadata
      parameters:
      - explode: false
        in: path
        name: triggerType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains JSON-schema event
            metadata.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Trigger Type was not
            found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve a JSON schema of all possible events
      tags:
      - Rules
  /mme/rules/trigger/types/{triggerType}/inputMetadata:
    get:
      description: Retrieve JSON schema format metadata describing the input required
        on Rule activation.
      operationId: triggerMetadata
      parameters:
      - explode: false
        in: path
        name: triggerType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains JSON schema format
            metadata.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Trigger Type was not
            found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve a JSON schema of the required input
      tags:
      - Rules
  /mme/rules/{ruleId}:
    delete:
      description: Delete the Rule with the specified <code>ruleId</code>. If the
        Rule could not be found or requester has insufficient permissions to access
        it, а <code>204 No Content </code>will be returned.
      operationId: deleteRule
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json: {}
          description: The Rule was successfully deleted.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Delete the Rule
      tags:
      - Rules
    put:
      description: Modify an existing Rule. Only Rules whose state is not enabled
        can be modified. After a Rule is modified, any information related to its
        previous execution (e.g. launched Tasks, number of involved, finished Devices,
        etc.) will be cleared.
      operationId: modify
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleInfo'
        description: Modifies the Rule
      responses:
        "204":
          content:
            application/json: {}
          description: The Rule was successfully modified.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Modify an existing Rule
      tags:
      - Rules
  /mme/rules/{ruleId}/action:
    get:
      description: Retrieve the Groovy script defining the action for this Rule.
      operationId: action
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The Rule action was successfully retrieved.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve the Rule action
      tags:
      - Rules
  /mme/rules/{ruleId}/devices:
    get:
      description: 'Retrieve a list of all Devices which are involved in this Rule
        and satisfy the applied <code>stateFilter</code>. A Device is considered involved
        in the Rule if it is involved in at least one Task launched by that Rule.<p>
        <h4>Available stateFilter values:</h4> <ui><li><tt> FINISHED_SUCCESS(0) :
        Retrieve only Devices that have finished with a success state</tt></li>  <li><tt>
        FINISHED_WARNING(1) : Retrieve only Devices that have finished the execution
        with a warning state</tt></li> <li><tt> FINISHED_ERROR(2) : Retrieve only
        Devices that have finished the execution with an error state</tt></li> <li><tt>
        FINISHED_CANCELED(3) : Retrieve only devices that have finished the execution
        with a canceled state</tt></li> <li><tt> RUNNING(4) : Retrieve only Devices
        that have a running state</tt></li>  <li><tt>FINISHED(64): This value unites
        all FINISHED_xxx values and could be used only as a parameter for filtering</tt></li><li><tt>ANY(128):
        Retrieve all involved devices, regardless of the completion state'
      operationId: listDevicesForRule
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: stateFilter
        required: false
        schema:
          enum:
          - FINISHED_SUCCESS
          - FINISHED_WARNING
          - FINISHED_ERROR
          - FINISHED_CANCELED
          - RUNNING
          - FINISHED
          - ANY
          type: string
        style: form
      - description: <p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size})
          Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id})
          Start the search from the cursor location. Specify the cursor ID without
          quotation marks. Cursor IDs are given in search responses and mark the position
          after the last entry of the previous search. The meaning of cursor IDs is
          unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains all Devices involved
            in the Rule.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve a list of all involved Devices
      tags:
      - Rules
    put:
      description: Retry the Rule over the Devices whose state satisfies the applied
        <code>stateFilter</code>. 'Once Per Device' option must be selected for the
        Rule.
      operationId: retryDevices
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: stateFilter
        required: true
        schema:
          items:
            enum:
            - SUCCESS
            - WARNING
            - ERROR
            - CANCELED
            - RUNNING
            type: string
          type: array
        style: form
      responses:
        "204":
          content:
            application/json: {}
          description: The successfully completed request contains 204 (NO_CONTENT).
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retry the Rule over the Devices whose state satisfies the applied stateFilter
      tags:
      - Rules
  /mme/rules/{ruleId}/devices/{deviceId}:
    get:
      description: Retrieve the execution status of a specified Device within the
        Rule.
      operationId: ruleDevice
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains the DeviceRuleStatus.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule or Device with
            the given ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve the execution status of a specified Device within the Rule
      tags:
      - Rules
    put:
      description: Retry the Rule over the Device with the specified <code>deviceId</code>.
        'Once Per Device' option must be selected for the Rule.
      operationId: retryDevice
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json: {}
          description: The successfully completed request contains 204 (NO_CONTENT)
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule or Device with
            the given ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retry the Rule over the Device
      tags:
      - Rules
  /mme/rules/{ruleId}/devices/{deviceId}/tasks:
    get:
      description: 'Retrieve all Tasks launched by the Rule which involve a specified
        Device. Limited amount of data is retrieved, by default on a page with 20
        elements.<p> <h4>Available stateFilter values:</h4> <ui><li><tt> FINISHED_SUCCESS(0)
        : Retrieve only Devices that have finished with a success state</tt></li>  <li><tt>
        FINISHED_WARNING(1) : Retrieve only Devices that have finished the execution
        with a warning state</tt></li> <li><tt> FINISHED_ERROR(2) : Retrieve only
        Devices that have finished the execution with an error state</tt></li> <li><tt>
        FINISHED_CANCELED(3) : Retrieve only devices that have finished the execution
        with a canceled state</tt></li> <li><tt> RUNNING(4) : Retrieve only Devices
        that have a running state</tt></li>  <li><tt>FINISHED(64): This value unites
        all FINISHED_xxx values and could be used only as a parameter for filtering</tt></li><li><tt>ANY(128):
        Retrieve all involved devices, regardless of the completion state'
      operationId: listTasksForDeviceInRule
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: stateFilter
        required: false
        schema:
          enum:
          - FINISHED_SUCCESS
          - FINISHED_WARNING
          - FINISHED_ERROR
          - FINISHED_CANCELED
          - RUNNING
          - FINISHED
          - ANY
          type: string
        style: form
      - description: <p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size})
          Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id})
          Start the search from the cursor location. Specify the cursor ID without
          quotation marks. Cursor IDs are given in search responses and mark the position
          after the last entry of the previous search. The meaning of cursor IDs is
          unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains Tasks.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule or Device with
            the given ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve all Tasks launched by the Rule which involve a specified Device
      tags:
      - Rules
  /mme/rules/{ruleId}/options:
    get:
      description: Retrieve the execution options of the Rule with the specified <code>ruleId</code>.
      operationId: options
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains the execution options
            of the Rule.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve the Rule execution options
      tags:
      - Rules
  /mme/rules/{ruleId}/properties:
    get:
      description: Get the custom properties of the Rule with the specified <code>ruleId</code>.
      operationId: properties
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains the custom Rule
            properties.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Get the custom Rule properties
      tags:
      - Rules
    post:
      description: Set custom properties of the Rule with the specified <code>ruleId</code>.
        If <tt> append </tt> is <tt> true</tt> the supplied properties will be appended/added
        to any properties currently existing for  this Rule, otherwise any existing
        properties will be fully replaced by the newly set ones.
      operationId: setProperties
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
        description: Set or add rule properties
      responses:
        "204":
          content:
            application/json: {}
          description: The Rule properties were successfully set.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Set custom Rule properties
      tags:
      - Rules
  /mme/rules/{ruleId}/scope:
    get:
      description: Retrieve the scope of an existing Rule identified by the specified
        <code>ruleId</code>.
      operationId: scope
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The Rule scope was successfully retrieved.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve the Rule scope
      tags:
      - Rules
  /mme/rules/{ruleId}/state:
    get:
      description: Retrieve the state of the Rule with the specified <code>ruleId</code>.
      operationId: state
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: The successfully completed request contains the Rule state.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve the Rule state
      tags:
      - Rules
    put:
      description: Enable or disable the Rule with the specified <code>ruleId</code>.
      operationId: setState
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: state
        required: false
        schema:
          enum:
          - ENABLE
          - DISABLE
          - DISABLE_CANCEL_TASKS
          type: string
        style: form
      responses:
        "204":
          content:
            application/json: {}
          description: The Rule state was successfully changed.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Enable or disable the Rule
      tags:
      - Rules
  /mme/rules/{ruleId}/status:
    get:
      description: Retrieve a Rule by a specified <code>ruleId</code>.
      operationId: rule
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      - description: Load statistic
        explode: true
        in: query
        name: statistic
        required: true
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleStatusInfo'
          description: The successfully completed request contains an already existing
            Rule.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve a Rule
      tags:
      - Rules
  /mme/rules/{ruleId}/tasks:
    get:
      description: Retrieve all Tasks launched by the Rule. By default, only a limited
        amount of data is retrieved on a page with 20 elements.
      operationId: tasks
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      - description: 'An RQL filter over the Task attributes.<h5></tt><br/>The attribute
          names in the filtering conditions can be some of:</h5> <ui><tt><li/><b>state</b>
          - integer value corresponding to the Task state as follows: </tt> <br/><br/><tt>1
          - RUNNING </tt><br/><tt> 2 - FINISHED</tt> <br/><tt>3 - FAILED_TO_LAUNCH</tt>
          <li/><tt><b>stateDescription</b> - string value corresponding to the state
          description </tt><li/><tt><b> involvedCount</b> - integer value corresponding
          to the the number of involved Devices in the Task.</tt> <li/><tt><b> successCount</b>
          - integer value corresponding to the the number of successfully finished
          Devices in the Task</tt><li/><tt><b>warningCount</b> - integer value corresponding
          the the number of Devices finished with warning in the Task </tt><li/><tt><b>
          errorCount</b> - integer value corresponding to the the number of Devices
          finished with error in the Task.</tt> <li/><tt><b>cancelCount</b> - integer
          value corresponding to the the number of Devices finished with warning in
          the Task.</tt><li/><tt><b>launchTime</b> - long value corresponding to the
          Task launch time given as milliseconds since 1 Jan 1970</tt><li/><tt><b>finishTime</b>
          - long value corresponding to the Task finish time given as milliseconds
          since 1 Jan 1970</tt><li/><tt><b>isPaused</b> - boolean value that is <code>true</code>
          when the execution is paused due to time constraint restrictions </tt><li/><tt><b>nextResume</b>
          - corresponds to resume time (in milliseconds since 1 Jan 1970) if the Task
          is currently paused </tt><li/><tt><b>nextPause</b> - corresponds to the
          next pause time (in milliseconds since 1 Jan 1970) if the Task is currently
          not paused </tt><li/><tt><b>taskId</b> - string value corresponding to the
          Task id</tt><li/><tt><b>ruleId</b> - string value corresponding to the Rule
          id if the Task is launched by a Rule trigger</tt><li/><tt><b>user</b> -string
          value corresponding to the user name of the user that has launched the Task<li/><tt><b>action</b>
          - string value corresponding to a textual representation of the searched
          action</tt><li/><tt><b>displayName</b> - string value corresponding the
          Task display name</tt><h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note:
          When using filter operations, only Tasks with the specified properties are
          returned.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(state,"0")</tt></li><li><tt>and(eq(involvedCount,2),eq(state,0))</tt></li></ui>'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: <p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size})
          Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id})
          Start the search from the cursor location. Specify the cursor ID without
          quotation marks. Cursor IDs are given in search responses and mark the position
          after the last entry of the previous search. The meaning of cursor IDs is
          unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains Tasks.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve all Tasks launched by the Rule
      tags:
      - Rules
    put:
      description: Fire the Rule with the specified <code>ruleId</code> manually.
      operationId: fire
      parameters:
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json: {}
          description: The Rule was successfully fired.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Rule with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Fire the Rule manually
      tags:
      - Rules
  /mme/tasks:
    get:
      description: ' Retrieve all available Tasks that satisfy the filtering criteria.'
      operationId: tasks_1
      parameters:
      - description: 'An RQL filter over the Task attributes.<h5></tt><br/>The attribute
          names in the filtering conditions can be some of:</h5> <ui><tt><li/><b>state</b>
          - integer value corresponding to the Task state as follows: </tt> <br/><br/><tt>1
          - RUNNING </tt><br/><tt> 2 - FINISHED</tt> <br/><tt>3 - FAILED_TO_LAUNCH</tt>
          <li/><tt><b>stateDescription</b> - string value corresponding to the state
          description </tt><li/><tt><b> involvedCount</b> - integer value corresponding
          to the the number of involved Devices in the Task.</tt> <li/><tt><b> successCount</b>
          - integer value corresponding to the the number of successfully finished
          Devices in the Task</tt><li/><tt><b>warningCount</b> - integer value corresponding
          the the number of Devices finished with warning in the Task </tt><li/><tt><b>
          errorCount</b> - integer value corresponding to the the number of Devices
          finished with error in the Task.</tt> <li/><tt><b>cancelCount</b> - integer
          value corresponding to the the number of Devices finished with warning in
          the Task.</tt><li/><tt><b>launchTime</b> - long value corresponding to the
          Task launch time given as milliseconds since 1 Jan 1970</tt><li/><tt><b>finishTime</b>
          - long value corresponding to the Task finish time given as milliseconds
          since 1 Jan 1970</tt><li/><tt><b>isPaused</b> - boolean value that is <code>true</code>
          when the execution is paused due to time constraint restrictions </tt><li/><tt><b>nextResume</b>
          - corresponds to resume time (in milliseconds since 1 Jan 1970) if the Task
          is currently paused </tt><li/><tt><b>nextPause</b> - corresponds to the
          next pause time (in milliseconds since 1 Jan 1970) if the Task is currently
          not paused </tt><li/><tt><b>taskId</b> - string value corresponding to the
          Task id</tt><li/><tt><b>ruleId</b> - string value corresponding to the Rule
          id if the Task is launched by a Rule trigger</tt><li/><tt><b>user</b> -string
          value corresponding to the user name of the user that has launched the Task<li/><tt><b>action</b>
          - string value corresponding to a textual representation of the searched
          action</tt><li/><tt><b>displayName</b> - string value corresponding the
          Task display name</tt><h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note:
          When using filter operations, only Tasks with the specified properties are
          returned.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(state,"0")</tt></li><li><tt>and(eq(involvedCount,2),eq(state,0))</tt></li></ui>'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: <p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size})
          Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id})
          Start the search from the cursor location. Specify the cursor ID without
          quotation marks. Cursor IDs are given in search responses and mark the position
          after the last entry of the previous search. The meaning of cursor IDs is
          unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: Retrieve all Tasks
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve all Tasks
      tags:
      - Tasks
    post:
      description: Launch a Task with the specified attributes - <code>displayName</code>,
        <code>scope</code>, <code>options</code> and <code>action</code>. The displayName,
        scope, and action are required.
      operationId: launchTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestTaskInfo'
        description: Launch new task
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusInfo'
          description: The Task was successfully launched.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Launch a Task
      tags:
      - Tasks
  /mme/tasks/devices/{deviceId}:
    get:
      description: 'Retrieve all Tasks and respective execution status for a particular
        Device, which  satisfies the applied state filter. The <code>freeTasks</code>
        value of <tt>true</tt> specifies that only Task executions not launched by
        any Rule should be retrieved, whereas the value of <tt>false</tt> specifies
        that all Task executions will be retrieved (including those launched by Rules).<p><h4>Available
        stateFilter values:</h4> <ui><li><tt> FINISHED_SUCCESS(0) : Retrieve only
        Devices that have finished the Task execution with a sucess state</tt></li>  <li><tt>
        FINISHED_WARNING(1) : Retrieve only Devices that have finished the Task execution
        with a warning state</tt></li> <li><tt> FINISHED_ERROR(2) : Retrieve only
        Devices that have finished the Task execution with an error state</tt></li>
        <li><tt> FINISHED_CANCELED(3) : Retrieve only Devices that have finished the
        Task execution with a canceled state</tt></li> <li><tt> RUNNING(4) : Retrieve
        only Devices that have finished the Task execution with a running state</tt></li>  <li><tt>FINISHED(64):
        This value unites all FINISHED_xxx values and could be used only as parameter
        for filtering</tt></li><li><tt>ANY(128): Retrieve all involved Devices, regardless
        of the completion sate'
      operationId: listTasksForDevice
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: stateFilter
        required: false
        schema:
          enum:
          - FINISHED_SUCCESS
          - FINISHED_WARNING
          - FINISHED_ERROR
          - FINISHED_CANCELED
          - RUNNING
          - FINISHED
          - ANY
          type: string
        style: form
      - explode: true
        in: query
        name: freeTasks
        required: false
        schema:
          type: boolean
        style: form
      - description: <p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size})
          Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id})
          Start the search from the cursor location. Specify the cursor ID without
          quotation marks. Cursor IDs are given in search responses and mark the position
          after the last entry of the previous search. The meaning of cursor IDs is
          unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains the specific page
            with DeviceTaskStatus.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Device with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve all Tasks and respective execution status for a particular
        Device
      tags:
      - Tasks
  /mme/tasks/devices/{deviceId}/items:
    get:
      description: Retrieve all Execution Items for a specific Device.
      operationId: listExecutionsForDevice
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: stateFilter
        required: false
        schema:
          enum:
          - FINISHED_SUCCESS
          - FINISHED_WARNING
          - FINISHED_ERROR
          - FINISHED_CANCELED
          - RUNNING
          - FINISHED
          - ANY
          type: string
        style: form
      - description: <p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size})
          Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id})
          Start the search from the cursor location. Specify the cursor ID without
          quotation marks. Cursor IDs are given in search responses and mark the position
          after the last entry of the previous search. The meaning of cursor IDs is
          unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains all Execution Items
            for the specified device.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Device with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve all Execution Items for a device
      tags:
      - Tasks
  /mme/tasks/{taskId}:
    delete:
      description: Delete the Task with the specified <code>taskId</code>. If the
        Task could not be found or requester has insufficient permissions to access
        it, а <code>204 No Content</code> will be returned.
      operationId: deleteTask
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json: {}
          description: The Task was successfully deleted.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Delete a Task
      tags:
      - Tasks
  /mme/tasks/{taskId}/action:
    get:
      description: Retrieve the Groovy script defining the action for this Task.
      operationId: action_1
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The Task action was successfully retrieved.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve the Task action
      tags:
      - Tasks
  /mme/tasks/{taskId}/devices:
    get:
      description: 'Retrieve all Devices which are involved in this Task and have
        the specified execution state. The <code>stateFilter</code> is a filter on
        the execution state of the retrieved involved devices.<p><h4>Available stateFilter
        values:</h4> <ui><li><tt> FINISHED_SUCCESS(0) : Retrieve only Devices that
        have finished the Task execution with a sucess state</tt></li>  <li><tt> FINISHED_WARNING(1)
        : Retrieve only Devices that have finished the Task execution with a warning
        state</tt></li> <li><tt> FINISHED_ERROR(2) : Retrieve only Devices that have
        finished the Task execution with an error state</tt></li> <li><tt> FINISHED_CANCELED(3)
        : Retrieve only Devices that have finished the Task execution with a canceled
        state</tt></li> <li><tt> RUNNING(4) : Retrieve only Devices that have finished
        the Task execution with a running state</tt></li>  <li><tt>FINISHED(64): This
        value unites all FINISHED_xxx values and could be used only as parameter for
        filtering</tt></li><li><tt>ANY(128): Retrieve all involved Devices, regardless
        of the completion sate'
      operationId: listDevicesForTask
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: stateFilter
        required: false
        schema:
          enum:
          - FINISHED_SUCCESS
          - FINISHED_WARNING
          - FINISHED_ERROR
          - FINISHED_CANCELED
          - RUNNING
          - FINISHED
          - ANY
          type: string
        style: form
      - description: <p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size})
          Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id})
          Start the search from the cursor location. Specify the cursor ID without
          quotation marks. Cursor IDs are given in search responses and mark the position
          after the last entry of the previous search. The meaning of cursor IDs is
          unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains the state of Devices
            in the scope of a Task.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve all Devices involved in this Task
      tags:
      - Tasks
    put:
      description: 'Retry the Task over the Devices whose status satisfies the applied
        state filter. Retrying forces: <ui><li><tt>partial executions that are not
        finished to be canceled</tt></li><li><tt>all previous execution info for these
        Devices within the Task to be deleted</tt></li><li><tt>the action script of
        the Task to be run again for these Devices</tt></li>'
      operationId: retryDevices_1
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: stateFilter
        required: true
        schema:
          items:
            enum:
            - SUCCESS
            - WARNING
            - ERROR
            - CANCELED
            - RUNNING
            type: string
          type: array
        style: form
      responses:
        "204":
          content:
            application/json: {}
          description: The successfully completed request contains 204 (NO_CONTENT).
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retry a Task over a particular Devices
      tags:
      - Tasks
  /mme/tasks/{taskId}/devices/{deviceId}:
    get:
      description: Retrieve the Device task status of a particular Device in the scope
        of a Task.
      operationId: taskDevice
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains the DeviceTaskStatus
            in the scope of a Task.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task or Device with
            the given ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve the Device task status in the scope of a Task
      tags:
      - Tasks
    put:
      description: 'Retry the Task over the Device with the specified <code>deviceId</code>.
        Retrying forces: <ui><li><tt>partial executions that are not finished to be
        canceled</tt></li><li><tt>all previous execution info for this Device within
        the Task to be deleted</tt></li><li><tt>the action script of the Task to be
        run again for this Device</tt></li>'
      operationId: retryDevice_1
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json: {}
          description: The successfully completed request contains 204 (NO_CONTENT).
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task or Device with
            the given ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retry the Task over a Device
      tags:
      - Tasks
  /mme/tasks/{taskId}/devices/{deviceId}/state:
    put:
      description: Cancel the execution of this Task over a Device
      operationId: cancelDeviceInTask
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json: {}
          description: The execution of the Task was successfully canceled.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task or Device with
            the given ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Cancel the execution of this Task over a Device
      tags:
      - Tasks
  /mme/tasks/{taskId}/options:
    get:
      description: Retrieve the execution options of the Task by the specified <code>taskId</code>.
      operationId: options_1
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains the execution options
            of the Task.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve the execution options of the Task
      tags:
      - Tasks
  /mme/tasks/{taskId}/properties:
    get:
      description: Get the custom properties assigned to the Task with the specified
        <code>taskId</code>.
      operationId: properties_1
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The successfully completed request contains the custom Task
            properties.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Get the custom properties assigned to this Task
      tags:
      - Tasks
    post:
      description: Set custom properties to the Task with the specified <code>taskId</code>.
        If <tt> append </tt> is <tt> true</tt>, the supplied properties will be appended/added
        to any properties currently existing for  this Task, otherwise any existing
        properties will be fully replaced by the supplied ones.
      operationId: setProperties_1
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
        description: Set or add Task properties
      responses:
        "204":
          content:
            application/json: {}
          description: The Task properties were successfully set.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Set custom Task properties
      tags:
      - Tasks
  /mme/tasks/{taskId}/rule:
    get:
      description: Retrieve the Rule which launched this Task or <code>204(NO_CONTENT)</code>
        if Task was manually launched.
      operationId: rule_1
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json: {}
          description: The Rule was successfully retrieved.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve the Rule which launched this Task
      tags:
      - Tasks
  /mme/tasks/{taskId}/scope:
    get:
      description: Retrieve the scope of the Task with the specified <code>taskId</code>.
      operationId: scope_1
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The Task scope was successfully retrieved.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve the Task scope
      tags:
      - Tasks
  /mme/tasks/{taskId}/state:
    get:
      description: Retrieve the state of the Task with the specified <code>taskId</code>.
      operationId: state_1
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: The successfully completed request contains the state of the
            Task.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve the state of the Task
      tags:
      - Tasks
    put:
      description: Cancel the execution of the Task by the specified <code>taskId</code>.
        If the Task could not be found or requester has insufficient permissions to
        access it, а <code>204 No Content</code> will be returned.
      operationId: cancel
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json: {}
          description: Cancel the execution of the Task by the specified <code>taskId</code>.
            If the Task could not be found or requester has insufficient permissions
            to access it, а <code>204 No Content</code> will be returned.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Cancel the execution of this Task
      tags:
      - Tasks
  /mme/tasks/{tasksId}/status:
    get:
      description: Retrieve a Task status by a specified <code>taskId</code>.
      operationId: status
      parameters:
      - explode: false
        in: path
        name: tasksId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusInfo'
          description: The successfully completed request contains an existing Task.
        "400":
          content:
            application/json: {}
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            to perform the requested operation on the given resource
        "404":
          content:
            application/json: {}
          description: The request could not be completed. The Task with the given
            ID was not found.
        "500":
          content:
            application/json: {}
          description: An internal error was encountered and the request could not
            be completed.
      summary: Retrieve a Task status
      tags:
      - Tasks
  /di/devices:
    get:
      description: Retrieve a list of devices matching the given filter. Optionally,
        you can also use field.selectors (see parameter fields) to get only the specified
        fields.
      operationId: devices_1
      parameters:
      - description: '<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note:
          When using filter operations, only devices with the specified properties
          are returned. For example, the filter ne(attributes/owner, "SID123") will
          only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},"value")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId},
          value)</tt></li><li><tt>and(eq(attributes/{attributeId1},"value"),eq(attributes/{attributeId2},"value"))</tt></li></ui><b>Filters
          containing a wildcard * symbol at the beginning can slow down your search
          request.</b>'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of namespaces. This list is used to limit
          the query to things in the given namespaces only. If this parameter is omitted,
          all registered namespaces of your solution will be queried.<h4>Examples:</h4><ul><li><tt>?namespaces=com.example.namespace</tt></li><li><tt>?namespaces=com.example.namespace1,com.example.namespace2</tt></li><li><tt>?fields=deviceId,attributes/location/longitude,attributes/address(city,street)</tt></li></ul>
        explode: true
        in: query
        name: namespaces
        required: false
        schema:
          type: string
        style: form
      - description: <p>Possible parameter values:</p><h5>Sort operations</h5><ul><li><tt>sort([+|-]{property})</tt></li><li><tt>sort([+|-]{property},[+|-]{property},...)</tt></li></ul><p><h5>Paging
          operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is
          200. Default page size is 25.</tt></li><li><tt>cursor({cursor-id}) Start
          the search from the cursor location. Specify the cursor ID without quotation
          marks. Cursor IDs are given in search responses and mark the position after
          the last entry of the previous search. The meaning of cursor IDs is unspecified
          and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>sort(+id)</tt></li><li><tt>sort(-attributes/{attributePropertyValue})</tt></li><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM).
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      - description: Contains a comma separated list of fields to be included in the
          returned JSON. Attributes can be selected in the same manner.<br><p><b>Selectable
          fields</b></p><ul><li><tt>ID</tt></li> <li><tt>policyId</tt></li><li><tt>attributes</tt><p>Supports
          selecting arbitrary sub-fields by using a comma separated list:</p><ul><li>several
          attribute paths can be passed as a comma separated list of JSON pointers
          (RFC-6901)<br><br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/{attributeValue}</tt>
          would select only attribute value (if present)</li><li><tt>?fields=attributes/{attributeId1}/{attributeValue},attributes/{attributeId2}/{attributeValue}</tt></li><li><tt>?fields=attributes/{attributeId1}/{attributeValue1},attributes/{attributeId1}/{attributeValue2}</tt></li></ul></li><li>a
          comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
          separated with /) to select </li><li>sub-selectors can be used to request
          only specific sub-fields by placing expressions in parentheses ( ) after
          a selected subfield<br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/(attributeValue1,attributeValue2)</tt></li></ul></li></ul></li><li><tt>features</tt><p>Supports
          selecting arbitrary fields in features similar to attributes</p><b>features/{featureId}/properties/{category}/{propertyId}</b></li></ul><h4>Examples:</h4><ul><li><tt>?fields=id,attributes,features</tt></li><li><tt>?fields=attributes/{attributeId1}(attributeValue1,attributeValue1),features</tt></li><li><tt>?fields=id,attributes/{attributeId1},features/{featureId}/properties/{category}/{propertyId}</tt></li></ul>
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Device'
                type: array
          description: The existing and readable Devices are successfully retrieved.
            The filter supports a limit option, which if not specified explicitly
            returns a default count of 25 devices. Maximum list size is 200.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve all Devices
      tags:
      - Devices
  /di/devices/count:
    get:
      description: Retrieve the number of devices matching the given filter.
      operationId: devicesCount
      parameters:
      - description: '<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note:
          When using filter operations, only devices with the specified properties
          are returned. For example, the filter ne(attributes/owner, "SID123") will
          only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},"value")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId},
          value)</tt></li><li><tt>and(eq(attributes/{attributeId1},"value"),eq(attributes/{attributeId2},"value"))</tt></li></ui><b>Filters
          containing a wildcard * symbol at the beginning can slow down your search
          request.</b>'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The number of devices matching the given filter was successfully
            retrieved.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve the number of Devices matching the given filter
      tags:
      - Devices
  /di/devices/{deviceId}:
    delete:
      description: Unregister a specific Device.
      operationId: unregister
      parameters:
      - description: Device ID
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: keepCredentials
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: true
        in: query
        name: keepPolicy
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: The device was successfully unregistered.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Unregister a specific Device
      tags:
      - Devices
    get:
      description: Retrieve an existing Device identified by the given <code>deviceId</code>.
      operationId: device
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: The specific Device was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve an existing Device identified by the given deviceId
      tags:
      - Devices
    post:
      description: Register a specific Device.
      operationId: register
      parameters:
      - description: Device ID
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInfo'
        description: Registration info
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: The device was successfully registered.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Register a specific Device
      tags:
      - Devices
  /di/devices/{deviceId}/attributes:
    delete:
      description: Delete Attributes of a specific Device
      operationId: deleteAttributes
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The Attributes of the specific Device were successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Delete Attributes of a specific Device
      tags:
      - Devices
    get:
      description: List all Attributes of a specific Device
      operationId: listAttributes
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attribute'
                type: array
          description: The Attributes of the specific Device were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: List all Attributes of a specific Device
      tags:
      - Devices
    post:
      description: Add Attributes of the specific Device. All previously existing
        attributes will be overwritten.
      operationId: createAttributes
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/AttributeObject'
              type: array
        description: List of Attributes
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
          description: The Attributes of the specific Device were successfully added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Add Attributes of a specific Device
      tags:
      - Devices
    put:
      description: Add Attribute of the specific Device. If an attribute with the
        same path already exists it will be overwritten.
      operationId: setAttribute
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
        description: Directory
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
          description: The Attribute of the specific Device was successfully added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Add Attribute of a specific Device
      tags:
      - Devices
  /di/devices/{deviceId}/attributes/{attributePath}:
    delete:
      description: Delete Attribute of a specific Device
      operationId: deleteAttribute
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attributePath
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The Attribute of the specific Device was successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Delete Attribute of a specific Device
      tags:
      - Devices
    get:
      description: 'Retrieve a specific Attribute of the device, identified by the
        <code>deviceId</code> path parameter. The Attribute (JSON) can be referenced
        hierarchically by applying a JSON Pointer notation (RFC-6901), e.g.: /devices/{deviceId}/attributes/house/room
        in order to retrieve the house field of an room object.'
      operationId: attribute
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attributePath
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
          description: The Attributes of the specific Device were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve a specific Attribute of a specific device
      tags:
      - Devices
  /di/devices/{deviceId}/features:
    get:
      description: Retrieve all Features of the Device identified by the <code>deviceId</code>
        path parameter.
      operationId: features
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Feature'
                type: array
          description: The list of Features of the specific Device was successfully
            retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: List all Features of a specific device
      tags:
      - Devices
  /di/devices/{deviceId}/features/{featureId}:
    get:
      description: Retrieve a Feature of the Device identified by the deviceId path
        parameter.
      operationId: feature
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
          description: The Feature was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve a Feature of a Device
      tags:
      - Devices
  /di/devices/{deviceId}/features/{featureId}/definitions:
    get:
      description: List all Definitions of the Feature identified by the <code>deviceId</code>
        and <code>featureId</code> path parameter.
      operationId: definitions
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FeatureDefinition'
                type: array
          description: The list of Definitions Features of the specific feature and
            device were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: List all Definitions of a Feature
      tags:
      - Devices
  /di/devices/{deviceId}/features/{featureId}/definitions/{fullyQualifiedIdentifier}:
    get:
      description: Retrieve the complete Definition of the Feature identified by the
        <code>deviceId</code>, <code>featureId</code> and <code>fullyQualifiedIdentifier<code>.
      operationId: definition
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      - description: |2-
           Pattern: ([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+)

            A single fully qualified identifier of a Feature Definition in the form 'namespace:name:version'
        explode: false
        in: path
        name: fullyQualifiedIdentifier
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureDefinition'
          description: The Definition was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve the Definition of a Feature
      tags:
      - Devices
  /di/devices/{deviceId}/features/{featureId}/properties:
    get:
      description: Retrieve the complete Properties of the Feature identified by the
        <code>deviceId</code> and <code>featureId</code> path parameter.
      operationId: featureProperties
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Property'
                type: array
          description: The Properties were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: List the Properties of a Feature
      tags:
      - Devices
  /di/devices/{deviceId}/features/{featureId}/properties/{propertyName}:
    get:
      description: Retrieve the complete Property of the Feature identified by the
        <code>deviceId</code> and <code>featureId</code> path parameter.
      operationId: property
      parameters:
      - explode: false
        in: path
        name: deviceId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: propertyName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: The Property was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve the Property of a Feature
      tags:
      - Devices
  /di/gateways:
    get:
      description: Retrieve a list of gateways matching the given filter. Optionally,
        you can also use field selectors (see parameter fields) to get only specified
        fields.
      operationId: gateways
      parameters:
      - description: '<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note:
          When using filter operations, only devices with the specified properties
          are returned. For example, the filter ne(attributes/owner, "SID123") will
          only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},"value")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId},
          value)</tt></li><li><tt>and(eq(attributes/{attributeId1},"value"),eq(attributes/{attributeId2},"value"))</tt></li></ui><b>Filters
          containing a wildcard * symbol at the beginning can slow down your search
          request.</b>'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of namespaces. This list is used to limit
          the query to things in the given namespaces only. If this parameter is omitted,
          all registered namespaces of your solution will be queried.<h4>Examples:</h4><ul><li><tt>?namespaces=com.example.namespace</tt></li><li><tt>?namespaces=com.example.namespace1,com.example.namespace2</tt></li><li><tt>?fields=deviceId,attributes/location/longitude,attributes/address(city,street)</tt></li></ul>
        explode: true
        in: query
        name: namespaces
        required: false
        schema:
          type: string
        style: form
      - description: <p>Possible parameter values:</p><h5>Sort operations</h5><ul><li><tt>sort([+|-]{property})</tt></li><li><tt>sort([+|-]{property},[+|-]{property},...)</tt></li></ul><p><h5>Paging
          operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is
          200. Default page size is 25.</tt></li><li><tt>cursor({cursor-id}) Start
          the search from the cursor location. Specify the cursor ID without quotation
          marks. Cursor IDs are given in search responses and mark the position after
          the last entry of the previous search. The meaning of cursor IDs is unspecified
          and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>sort(+id)</tt></li><li><tt>sort(-attributes/{attributePropertyValue})</tt></li><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM).
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      - description: Contains a comma separated list of fields to be included in the
          returned JSON. Attributes can be selected in the same manner.<br><p><b>Selectable
          fields</b></p><ul><li><tt>ID</tt></li> <li><tt>policyId</tt></li><li><tt>attributes</tt><p>Supports
          selecting arbitrary sub-fields by using a comma separated list:</p><ul><li>several
          attribute paths can be passed as a comma separated list of JSON pointers
          (RFC-6901)<br><br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/{attributeValue}</tt>
          would select only attribute value (if present)</li><li><tt>?fields=attributes/{attributeId1}/{attributeValue},attributes/{attributeId2}/{attributeValue}</tt></li><li><tt>?fields=attributes/{attributeId1}/{attributeValue1},attributes/{attributeId1}/{attributeValue2}</tt></li></ul></li><li>a
          comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
          separated with /) to select </li><li>sub-selectors can be used to request
          only specific sub-fields by placing expressions in parentheses ( ) after
          a selected subfield<br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/(attributeValue1,attributeValue2)</tt></li></ul></li></ul></li><li><tt>features</tt><p>Supports
          selecting arbitrary fields in features similar to attributes</p><b>features/{featureId}/properties/{category}/{propertyId}</b></li></ul><h4>Examples:</h4><ul><li><tt>?fields=id,attributes,features</tt></li><li><tt>?fields=attributes/{attributeId1}(attributeValue1,attributeValue1),features</tt></li><li><tt>?fields=id,attributes/{attributeId1},features/{featureId}/properties/{category}/{propertyId}</tt></li></ul>
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Gateway'
                type: array
          description: The existing and readable Gateways are successfully retrieved.
            The filter supports a limit option and if not explicitly specified, a
            default count of 25 devices are returned. Maximum list size is 200.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve all Gateways
      tags:
      - Devices
  /di/gateways/count:
    get:
      description: Retrieve the number of gateways matching the given filter.
      operationId: gatewaysCount
      parameters:
      - description: '<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note:
          When using filter operations, only devices with the specified properties
          are returned. For example, the filter ne(attributes/owner, "SID123") will
          only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},"value")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId},
          value)</tt></li><li><tt>and(eq(attributes/{attributeId1},"value"),eq(attributes/{attributeId2},"value"))</tt></li></ui><b>Filters
          containing a wildcard * symbol at the beginning can slow down your search
          request.</b>'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The number of gateways matching the given filter was successfully
            retrieved
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve the number of gateways matching the given filter
      tags:
      - Devices
  /di/gateways/{gatewayId}:
    get:
      description: Retrieve an existing Gateway identified by the given gatewayId.
      operationId: gateway
      parameters:
      - explode: false
        in: path
        name: gatewayId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Gateway'
                type: array
          description: The Gateway was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve an existing Gateway identified by the given gatewayId
      tags:
      - Devices
  /di/gateways/{gatewayId}/devices:
    get:
      description: Retrieve a list of edge devices attached to the gateway identified
        by <code>gatewayId</code> and matching the given filter. Optionally, you can
        also use field selectors (see parameter fields) to get only the specified
        fields.
      operationId: devices
      parameters:
      - explode: false
        in: path
        name: gatewayId
        required: true
        schema:
          type: string
        style: simple
      - description: '<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note:
          When using filter operations, only devices with the specified properties
          are returned. For example, the filter ne(attributes/owner, "SID123") will
          only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},"value")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId},
          value)</tt></li><li><tt>and(eq(attributes/{attributeId1},"value"),eq(attributes/{attributeId2},"value"))</tt></li></ui><b>Filters
          containing a wildcard * symbol at the beginning can slow down your search
          request.</b>'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of namespaces. This list is used to limit
          the query to things in the given namespaces only. If this parameter is omitted,
          all registered namespaces of your solution will be queried.<h4>Examples:</h4><ul><li><tt>?namespaces=com.example.namespace</tt></li><li><tt>?namespaces=com.example.namespace1,com.example.namespace2</tt></li><li><tt>?fields=deviceId,attributes/location/longitude,attributes/address(city,street)</tt></li></ul>
        explode: true
        in: query
        name: namespaces
        required: false
        schema:
          type: string
        style: form
      - description: <p>Possible parameter values:</p><h5>Sort operations</h5><ul><li><tt>sort([+|-]{property})</tt></li><li><tt>sort([+|-]{property},[+|-]{property},...)</tt></li></ul><p><h5>Paging
          operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is
          200. Default page size is 25.</tt></li><li><tt>cursor({cursor-id}) Start
          the search from the cursor location. Specify the cursor ID without quotation
          marks. Cursor IDs are given in search responses and mark the position after
          the last entry of the previous search. The meaning of cursor IDs is unspecified
          and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>sort(+id)</tt></li><li><tt>sort(-attributes/{attributePropertyValue})</tt></li><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM).
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      - description: Contains a comma separated list of fields to be included in the
          returned JSON. Attributes can be selected in the same manner.<br><p><b>Selectable
          fields</b></p><ul><li><tt>ID</tt></li> <li><tt>policyId</tt></li><li><tt>attributes</tt><p>Supports
          selecting arbitrary sub-fields by using a comma separated list:</p><ul><li>several
          attribute paths can be passed as a comma separated list of JSON pointers
          (RFC-6901)<br><br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/{attributeValue}</tt>
          would select only attribute value (if present)</li><li><tt>?fields=attributes/{attributeId1}/{attributeValue},attributes/{attributeId2}/{attributeValue}</tt></li><li><tt>?fields=attributes/{attributeId1}/{attributeValue1},attributes/{attributeId1}/{attributeValue2}</tt></li></ul></li><li>a
          comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
          separated with /) to select </li><li>sub-selectors can be used to request
          only specific sub-fields by placing expressions in parentheses ( ) after
          a selected subfield<br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/(attributeValue1,attributeValue2)</tt></li></ul></li></ul></li><li><tt>features</tt><p>Supports
          selecting arbitrary fields in features similar to attributes</p><b>features/{featureId}/properties/{category}/{propertyId}</b></li></ul><h4>Examples:</h4><ul><li><tt>?fields=id,attributes,features</tt></li><li><tt>?fields=attributes/{attributeId1}(attributeValue1,attributeValue1),features</tt></li><li><tt>?fields=id,attributes/{attributeId1},features/{featureId}/properties/{category}/{propertyId}</tt></li></ul>
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Device'
                type: array
          description: The list of existing and readable edge devices attached to
            the gateway is successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve a list of Edge Devices attached to the gateway
      tags:
      - Devices
  /di/gateways/{gatewayId}/devices/count:
    get:
      description: Retrieve the number of devices matching the given filter.
      operationId: devicesCount_1
      parameters:
      - explode: false
        in: path
        name: gatewayId
        required: true
        schema:
          type: string
        style: simple
      - description: '<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note:
          When using filter operations, only devices with the specified properties
          are returned. For example, the filter ne(attributes/owner, "SID123") will
          only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},"value")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId},
          value)</tt></li><li><tt>and(eq(attributes/{attributeId1},"value"),eq(attributes/{attributeId2},"value"))</tt></li></ui><b>Filters
          containing a wildcard * symbol at the beginning can slow down your search
          request.</b>'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The number of devices matching the given filter was successfully
            retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve the number of Devices matching the given filter
      tags:
      - Devices
  /di/groups/directories:
    get:
      description: Retrieve a list of directories matching the given filter. Optionally,
        you can also use field selectors (see parameter fields) to get only the specified
        fields.
      operationId: directories
      parameters:
      - description: '<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note:
          When using filter operations, only directories with the specified properties
          are returned. For example, the filter ne(name, "specifiedName") will only
          return directories that do have the specifiedName name.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq({id},"value")</tt></li><li><tt>exists({path},
          value)</tt></li><li><tt>and(eq({path},"value"),eq({name},"value"))</tt></li></ui><b>Filters
          containing a wildcard * symbol at the beginning can slow down your search
          request.</b>'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: <p>Possible parameter values:</p><h5>Sort operations</h5><ul><li><tt>sort([+|-]{property})</tt></li><li><tt>sort([+|-]{property},[+|-]{property},...)</tt></li></ul><p><h5>Paging
          operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is
          200. Default page size is 25.</tt></li><li><tt>cursor({cursor-id}) Start
          the search from the cursor location. Specify the cursor ID without quotation
          marks. Cursor IDs are given in search responses and mark the position after
          the last entry of the previous search. The meaning of cursor IDs is unspecified
          and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>sort(+id)</tt></li><li><tt>sort(-attributes/{attributePropertyValue})</tt></li><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM).
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Directory'
                type: array
          description: The successfully completed request contains only existing and
            readable directories. The filter supports a limit option, which if not
            specified explicitly, returns a default count of 25 directories. Maximum
            list size is 200.
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "500":
          content:
            application/json: {}
          description: An internal error has occurred and the request could not be
            completed.
      summary: List all Directories
      tags:
      - Groups
    post:
      description: Add a directory to the directory hierarchy.
      operationId: createDirectory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryParameters'
        description: Directory
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
          description: The directory was successfully added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The directory with the
            given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Add a Directory to the directory hierarchy
      tags:
      - Groups
  /di/groups/directories/root:
    get:
      description: Retrieve the root directory of the directory hierarchy. All directories,
        that have no parent directory assigned, are subdirectories of this directory.
      operationId: root
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
          description: The root directory was successfully retrieved.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve the Root Directory of the directory hierarchy
      tags:
      - Groups
  /di/groups/directories/{path}:
    delete:
      description: Delete an existing directory from the directory tree. If the devices
        parameter's value is <code>true</code> the devices under the directory will
        be deleted as well, if the value is <code>false</code>, these devices will
        still be listed under the root, even after the directory is deleted.
      operationId: deleteDirectory
      parameters:
      - description: The path of a directory in the directory tree
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      - description: If the value of the members' parameter is <code>true</code> the
          members under the directory should be deleted as  well.
        explode: true
        in: query
        name: devices
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "204":
          description: The directory was successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The directory with the
            given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Delete an existing directory from the directory hierarchy
      tags:
      - Groups
    get:
      description: Retrieve an existing directory from the groups hierarchy.
      operationId: directory
      parameters:
      - description: The path of a directory in the directory tree
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
          description: The directory was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The directory with the
            given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve an existing Directory from the groups hierarchy
      tags:
      - Groups
  /di/groups/directories/{path}/attributes:
    delete:
      description: Delete Attributes of a specific Directory
      operationId: deleteAttributes_1
      parameters:
      - explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The Attributes of the specific Directory were successfully
            deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Delete Attributes of a specific Directory
      tags:
      - Groups
    get:
      description: The Attributes of the specific Directory were successfully retrieved.
      operationId: listAttributes_1
      parameters:
      - explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attribute'
                type: array
          description: The Attributes of the specific Directory were successfully
            retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: List all Attributes of a specific Directory
      tags:
      - Groups
    post:
      description: Add Attributes of the specific Directory. All previously existing
        attributes will be overwritten.
      operationId: createAttributes_1
      parameters:
      - explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/AttributeObject'
              type: array
        description: List of Attributes
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
          description: The Attributes of the specific Directory were successfully
            added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Add Attributes of a specific Directory
      tags:
      - Groups
    put:
      description: Add Attribute of the specific Directory. If an attribute with the
        same path already exists it will be overwritten.
      operationId: setAttribute_1
      parameters:
      - explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
        description: Attribute
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
          description: The Attribute of the specific Directory was successfully added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Add Attribute of a specific Directory
      tags:
      - Groups
  /di/groups/directories/{path}/attributes/{attributePath}:
    delete:
      description: Delete Attribute of a specific Directory
      operationId: deleteAttribute_1
      parameters:
      - explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attributePath
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The Attribute of the specific Directory was successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Delete Attribute of a specific Directory
      tags:
      - Groups
    get:
      description: 'Retrieve a specific Attribute of the Directory, identified by
        the <code>path</code> parameter. The Attribute (JSON) can be referenced hierarchically
        by applying a JSON Pointer notation (RFC-6901), e.g.: /directories/{path}/attributes/house/room
        in order to retrieve the house field of an room object.'
      operationId: attribute_1
      parameters:
      - explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attributePath
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
          description: The Attributes of the specific Device were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve a specific Attribute of a specific device
      tags:
      - Groups
  /di/groups/directories/{path}/directory/{targetParentPath}:
    put:
      description: Moves the directory with a specific identifier to a target directory
        with the specified identifier.
      operationId: moveDirectory
      parameters:
      - description: The path of a directory in the directory tree
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      - description: The path of the parent directory, the directory will be moved
          to
        explode: false
        in: path
        name: targetParentPath
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The directory was successfully moved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The directory, tag, device
            or gateway with the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Move the Directory
      tags:
      - Groups
  /di/groups/directories/{path}/members:
    get:
      description: Retrieve a list of members(Gateways or Devices) that match the
        given filter.
      operationId: directoryMembers
      parameters:
      - description: The path of a directory in the directory tree
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      - description: If the value is <b>true</b>, the members are devices, if it is
          <b>false</b>, the members are gateways.
        explode: true
        in: query
        name: devices
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: If the value is <b>true</b>, all members will be listed (including
          sub-directories' gateways or devices), if <b>false</b>, only members directly
          under this directory will be listed.
        explode: true
        in: query
        name: recursive
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: '<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note:
          When using filter operations, only devices with the specified properties
          are returned. For example, the filter ne(attributes/owner, "SID123") will
          only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},"value")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId},
          value)</tt></li><li><tt>and(eq(attributes/{attributeId1},"value"),eq(attributes/{attributeId2},"value"))</tt></li></ui><b>Filters
          containing a wildcard * symbol at the beginning can slow down your search
          request.</b>'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: A comma separated list of namespaces. This list is used to limit
          the query to things in the given namespaces only. If this parameter is omitted,
          all registered namespaces of your solution will be queried.<h4>Examples:</h4><ul><li><tt>?namespaces=com.example.namespace</tt></li><li><tt>?namespaces=com.example.namespace1,com.example.namespace2</tt></li><li><tt>?fields=deviceId,attributes/location/longitude,attributes/address(city,street)</tt></li></ul>
        explode: true
        in: query
        name: namespaces
        required: false
        schema:
          type: string
        style: form
      - description: <p>Possible parameter values:</p><h5>Sort operations</h5><ul><li><tt>sort([+|-]{property})</tt></li><li><tt>sort([+|-]{property},[+|-]{property},...)</tt></li></ul><p><h5>Paging
          operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is
          200. Default page size is 25.</tt></li><li><tt>cursor({cursor-id}) Start
          the search from the cursor location. Specify the cursor ID without quotation
          marks. Cursor IDs are given in search responses and mark the position after
          the last entry of the previous search. The meaning of cursor IDs is unspecified
          and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>sort(+id)</tt></li><li><tt>sort(-attributes/{attributePropertyValue})</tt></li><li><tt>size(10)
          return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after
          the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If
          you need to specify multiple options, when using the swagger UI just write
          each option in a new line. When using the plain REST API programmatically,
          you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM).
        explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      - description: Contains a comma separated list of fields to be included in the
          returned JSON. Attributes can be selected in the same manner.<br><p><b>Selectable
          fields</b></p><ul><li><tt>ID</tt></li> <li><tt>policyId</tt></li><li><tt>attributes</tt><p>Supports
          selecting arbitrary sub-fields by using a comma separated list:</p><ul><li>several
          attribute paths can be passed as a comma separated list of JSON pointers
          (RFC-6901)<br><br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/{attributeValue}</tt>
          would select only attribute value (if present)</li><li><tt>?fields=attributes/{attributeId1}/{attributeValue},attributes/{attributeId2}/{attributeValue}</tt></li><li><tt>?fields=attributes/{attributeId1}/{attributeValue1},attributes/{attributeId1}/{attributeValue2}</tt></li></ul></li><li>a
          comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
          separated with /) to select </li><li>sub-selectors can be used to request
          only specific sub-fields by placing expressions in parentheses ( ) after
          a selected subfield<br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/(attributeValue1,attributeValue2)</tt></li></ul></li></ul></li><li><tt>features</tt><p>Supports
          selecting arbitrary fields in features similar to attributes</p><b>features/{featureId}/properties/{category}/{propertyId}</b></li></ul><h4>Examples:</h4><ul><li><tt>?fields=id,attributes,features</tt></li><li><tt>?fields=attributes/{attributeId1}(attributeValue1,attributeValue1),features</tt></li><li><tt>?fields=id,attributes/{attributeId1},features/{featureId}/properties/{category}/{propertyId}</tt></li></ul>
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Device'
                type: array
          description: The list of members was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The directory with the
            given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve a list of Members
      tags:
      - Groups
  /di/groups/directories/{path}/members/{memberId}:
    put:
      description: Move a Device or Gateway with a specific ID to the target directory
        with the specified ID.
      operationId: moveMember
      parameters:
      - description: The path of the parent directory, the device will be moved to
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: memberId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The Device or Gateway was successfully moved to the target
            directory.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The directory, tag, device
            or gateway with the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Move the Device or Gateway to the target directory
      tags:
      - Groups
  /di/groups/directories/{path}/parent:
    get:
      description: Retrieve the parent directory of this directory
      operationId: parent
      parameters:
      - description: The path of a directory in the directory tree
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
          description: The existing and readable parent directory is successfully
            retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The directory with the
            given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve the parent directory of this directory
      tags:
      - Groups
  /di/groups/tags:
    get:
      description: Retrieve a list of Tags matching the specified filter
      operationId: tags
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                type: array
          description: The list of tags matching the specified filter was successfully
            retrieved. The filter supports a limit option, which if not specified
            explicitly returns a default count of 25 tags. Maximum list size is 200
            tags.
        "401":
          content:
            application/json: {}
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json: {}
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "500":
          content:
            application/json: {}
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve a list of Tags matching the specified filter
      tags:
      - Groups
    post:
      description: Create a tag according to the specified parameters.
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Parameters'
        description: Create new tag
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: The tag was successfully created.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Create a Tag
      tags:
      - Groups
  /di/groups/tags/{name}:
    delete:
      description: Delete a tag with the specified name.
      operationId: deleteTag
      parameters:
      - description: The name of the tag
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The tag was successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The tag with the given
            name was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Delete a Tag
      tags:
      - Groups
    get:
      description: Retrieve an existing Tag with a specified name
      operationId: tag
      parameters:
      - description: The name of the tag
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: The tag with the specified name was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The tag with the given
            name was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve an existing Tag with a specified name
      tags:
      - Groups
  /di/groups/tags/{name}/attributes:
    delete:
      description: Add Attributes of a specific Tag
      operationId: deleteTagAttributes
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The Attributes of the specific Tag were successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Add Attributes of a specific Tag
      tags:
      - Groups
    get:
      description: The Attributes of the specific Tag were successfully retrieved.
      operationId: listTagAttributes
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attribute'
                type: array
          description: The Attributes of the specific Tag were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: List all Attributes of a specific Tag
      tags:
      - Groups
    post:
      description: Add Attributes of the specific Tag. All previously existing attributes
        will be overwritten.
      operationId: createTagAttributes
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/AttributeObject'
              type: array
        description: List of Attributes
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
          description: The Attributes of the specific Tag were successfully added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Add Attributes of a specific Tag
      tags:
      - Groups
    put:
      description: 'Add Attribute of the specific Tag. If an attribute with the same
        path already exists it will be overwritten. '
      operationId: setTagAttribute
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attribute'
        description: Attribute
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Directory'
          description: The Attribute of the specific Tag was successfully added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Add Attribute of a specific Tag
      tags:
      - Groups
  /di/groups/tags/{name}/attributes/{attributePath}:
    delete:
      description: Add Attribute of a specific Tag
      operationId: deleteTagAttribute
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attributePath
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The Attribute of the specific Tag was successfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Add Attribute of a specific Tag
      tags:
      - Groups
    get:
      description: 'Retrieve a specific Attribute of the Tag, identified by name.
        The Attribute (JSON) can be referenced hierarchically by applying a JSON Pointer
        notation (RFC-6901), e.g.: /tags/{name}/attributes/house/room in order to
        retrieve the house field of an room object.'
      operationId: tagAttribute
      parameters:
      - explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: attributePath
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
          description: The Attribute of the specific Tag was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            or does not conform to RFC-2396 (URI).'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The Device or Gateway with
            the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve a specific Attribute of a specific Tag
      tags:
      - Groups
  /di/groups/tags/{name}/members:
    get:
      description: Retrieve a list of members(Gateways or Devices) that match the
        given filter.
      operationId: membersTag
      parameters:
      - description: The name of the tag
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: If the value is <b>true</b>, the members are devices, if it is
          <b>false</b>, the members are gateways.
        explode: true
        in: query
        name: devices
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: namespaces
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: option
        required: false
        schema:
          type: string
        style: form
      - description: Contains a comma separated list of fields to be included in the
          returned JSON. Attributes can be selected in the same manner.<br><p><b>Selectable
          fields</b></p><ul><li><tt>ID</tt></li> <li><tt>policyId</tt></li><li><tt>attributes</tt><p>Supports
          selecting arbitrary sub-fields by using a comma separated list:</p><ul><li>several
          attribute paths can be passed as a comma separated list of JSON pointers
          (RFC-6901)<br><br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/{attributeValue}</tt>
          would select only attribute value (if present)</li><li><tt>?fields=attributes/{attributeId1}/{attributeValue},attributes/{attributeId2}/{attributeValue}</tt></li><li><tt>?fields=attributes/{attributeId1}/{attributeValue1},attributes/{attributeId1}/{attributeValue2}</tt></li></ul></li><li>a
          comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901)
          separated with /) to select </li><li>sub-selectors can be used to request
          only specific sub-fields by placing expressions in parentheses ( ) after
          a selected subfield<br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/(attributeValue1,attributeValue2)</tt></li></ul></li></ul></li><li><tt>features</tt><p>Supports
          selecting arbitrary fields in features similar to attributes</p><b>features/{featureId}/properties/{category}/{propertyId}</b></li></ul><h4>Examples:</h4><ul><li><tt>?fields=id,attributes,features</tt></li><li><tt>?fields=attributes/{attributeId1}(attributeValue1,attributeValue1),features</tt></li><li><tt>?fields=id,attributes/{attributeId1},features/{featureId}/properties/{category}/{propertyId}</tt></li></ul>
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Device'
                type: array
          description: The list of members was successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The tag with the given
            name was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Retrieve a list of Members
      tags:
      - Groups
  /di/groups/tags/{name}/{memberId}:
    put:
      description: Tag/Untag a member with a specific ID i.e. attach/detach the tag
        with the specified ID from the member(gateway or device).
      operationId: tagMember
      parameters:
      - description: The name of the tag
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: The memberId(of a device or gateway)
        explode: false
        in: path
        name: memberId
        required: true
        schema:
          type: string
        style: simple
      - description: If the value is <b>true</b>, attaches the tag with the specified
          ID to the device, if <b>false</b>, detaches the tag with the specified ID
          from the device.
        explode: true
        in: query
        name: tag
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The member(gateway or device) was successfully tagged/untagged.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: 'The request could not be completed. The ID either does not
            contain the mandatory namespace prefix (java package notation + : colon)
            does not conform to RFC-2396 (URI)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authentication.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed due to missing authorization
            required for performing the requested operation on the given resource.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: The request could not be completed. The directory, tag, device
            or gateway with the given ID was not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEntity'
          description: An internal error has occurred and the request could not be
            completed.
      summary: Tag/Untag a Member of a Tag
      tags:
      - Groups
components:
  schemas:
    ErrorEntity:
      description: The advanced HTTP error response handling
      properties:
        message:
          description: The message of the error
          type: string
        statusCode:
          description: The HTTP status code of the error
          format: int32
          type: integer
        errorCode:
          format: int32
          type: integer
        description:
          type: string
        UID:
          type: string
      required:
      - message
      - statusCode
      - uid
      type: object
    ActionInfo:
      description: Groovy script and type defining the action for this Rule.
      example:
        actionType: groovy
        actionDef: '{"groovyScript":"write action script here ..."}'
      properties:
        actionType:
          description: The type of action used. All available action types can be
            listed through the method <code>ws/mme/rules/actions</code>
          example: groovy
          type: string
        actionDef:
          description: A JSON object, which should satisfy the metadata required for
            this action type. The metadata for the given action type is available
            through the method <code>ws/mme/rules/actions/{actionType}</code>
          example: '{"groovyScript":"write action script here ..."}'
          type: string
      required:
      - actionDef
      - actionType
      type: object
    DeviceScopeInfo:
      description: The JSON Schema defines three pre-filled options in this order
        of priority - IdSelection, GroovySelection, GroupSelection - for defining
        Device Scope. Only one of them should be filled in. If several options are
        present - even if any of them is left empty or is invalid, all of them will
        be considered according to their order of priority.
      example:
        groupSelection:
          filteringScript: filteringScript
          directoryPath: directoryPath
          rqlQuery: rqlQuery
          recursive: true
          gatewaysOnly: true
          tags:
          - tags
          - tags
        groovySelection:
          filteringScript: filteringScript
          listingScript: listingScript
        idSelection:
          deviceIds:
          - deviceIds
          - deviceIds
      properties:
        idSelection:
          $ref: '#/components/schemas/IdSelectionInfo'
        groovySelection:
          $ref: '#/components/schemas/GroovySelectionInfo'
        groupSelection:
          $ref: '#/components/schemas/GroupSelectionInfo'
      required:
      - groovySelection
      - groupSelection
      - idSelection
      type: object
    ExecOptInfo:
      description: Execution options of this Rule
      example:
        overlapOption: 1
        timeConstraint: timeConstraint
        autoDisable: true
        concurrencyLimit: 3
        oncePerDevice: true
        concurrencyTimeout: 2
      properties:
        overlapOption:
          default: 1
          description: '  Defines whether multiple Tasks over the same device can
            overlap or should be replaced. This option is applicable only for Rules.
            Overlapping: <li> ALLOW_OVERLAPPING_TASKS(0): No relation constraint between
            Tasks. New Tasks can be triggered, although old Tasks are still active.
            This option should be used very carefully due to possible accumulation
            (explosion) of unfinished Tasks. </li> <li>NO_OVERLAPPING_CANCEL_OLD(1)
            : In case of Rule firing for a particular device, any previous executions
            still running for this device in the scope of the same Rule will be canceled.
            </li><li> NO_OVERLAPPING_KEEP_OLD_SKIP_NEW(2): Skip triggering a new Task
            for devices that already have unfinished Tasks in the scope of the Rule.;'
          enum:
          - 0
          - 1
          - 2
          example: 1
          format: int32
          type: integer
        concurrencyLimit:
          default: -1
          description: Restricts the maximum number of devices concurrently executing
            a Task or Rule.
          format: int32
          type: integer
        concurrencyTimeout:
          description: Timeout in seconds after which a non-confirmed execution expires
            and stops occupying room in the concurrency limit. The default value is
            30 seconds.
          format: int32
          type: integer
        oncePerDevice:
          default: true
          description: If the Rule should be triggered no more than once for the same
            device, false otherwise
          type: boolean
        autoDisable:
          default: true
          description: If the Rule should be automatically disabled once all targets
            from the Scope pass through the triggering conditions, false otherwise
          type: boolean
        timeConstraint:
          description: 'A time schedule in which the Task execution is permitted.
            The time schedule constraint must be provided as a cron expression. <code>Example:</code>
            <li/>* * 9-17 ? * MON-FRI: defines that the execution time will be on
            working days (Monday to Friday) between 9.00-17.00h<li/>* * 00-01 * *
            ?: defines that execution time will be every day between 00-01 in the
            morning.<li/>* * * 01 * ?: defines that execution time will be on the
            1st day of each month .'
          type: string
      required:
      - concurrencyLimit
      - timeConstraint
      type: object
    GroovySelectionInfo:
      description: A Dynamic selection of devices determined by a custom Groovy listing
        script.
      example:
        filteringScript: filteringScript
        listingScript: listingScript
      properties:
        listingScript:
          description: Custom Groovy listing script which dynamically includes devices
            in the selection
          type: string
        filteringScript:
          description: A custom Groovy filtering script which is used to narrow down
            the devices belonging to this selection. If present, only devices satisfying
            this script will be included in the selection.
          type: string
      required:
      - listingScript
      type: object
    GroupSelectionInfo:
      description: A Selection composed of a group of devices.
      example:
        filteringScript: filteringScript
        directoryPath: directoryPath
        rqlQuery: rqlQuery
        recursive: true
        gatewaysOnly: true
        tags:
        - tags
        - tags
      properties:
        directoryPath:
          description: Path of the directory whose devices belong to this selection
          type: string
        recursive:
          description: Indicates whether devices from the entire subtree (true) or
            only direct members (false) of the given directory are included in this
            selection
          type: boolean
        gatewaysOnly:
          description: Indicates whether only gateways are included in this selection.
          type: boolean
        tags:
          description: List of tag names to further narrow down the selection - only
            devices belonging to the given directory and tagged with the given tags
            are included in this selection.
          items:
            description: List of tag names to further narrow down the selection -
              only devices belonging to the given directory and tagged with the given
              tags are included in this selection.
            type: string
          type: array
        rqlQuery:
          description: RQL filter query which is used to narrow down the devices belonging
            to this selection. If present, only devices matching this query will be
            present in the selection.
          type: string
        filteringScript:
          description: A custom Groovy filtering script which is used to narrow down
            the devices belonging to this selection. If present, only devices satisfying
            this script will be included in the selection.
          type: string
      required:
      - directoryPath
      type: object
    IdSelectionInfo:
      description: A Selection composed of a list of device ids.
      example:
        deviceIds:
        - deviceIds
        - deviceIds
      properties:
        deviceIds:
          description: Ids of the devices belonging to this selection
          items:
            description: Ids of the devices belonging to this selection
            type: string
          type: array
      required:
      - deviceIds
      type: object
    RuleInfo:
      example:
        displayName: displayName
        scope:
          deviceScope:
            groupSelection:
              filteringScript: filteringScript
              directoryPath: directoryPath
              rqlQuery: rqlQuery
              recursive: true
              gatewaysOnly: true
              tags:
              - tags
              - tags
            groovySelection:
              filteringScript: filteringScript
              listingScript: listingScript
            idSelection:
              deviceIds:
              - deviceIds
              - deviceIds
          systemScope: false
        options:
          overlapOption: 1
          timeConstraint: timeConstraint
          autoDisable: true
          concurrencyLimit: 3
          oncePerDevice: true
          concurrencyTimeout: 2
        action:
          actionType: groovy
          actionDef: '{"groovyScript":"write action script here ..."}'
        trigger:
          triggerElements:
          - condition: condition
            triggerEvent:
              mode: event-driven (device.events.trigger), timer-driven (trigger.cron)
                or manual-fire (mme.manual.trigger)
              activationParams: activationParams
              eventType: eventType
          - condition: condition
            triggerEvent:
              mode: event-driven (device.events.trigger), timer-driven (trigger.cron)
                or manual-fire (mme.manual.trigger)
              activationParams: activationParams
              eventType: eventType
          generalCondition: generalCondition
      properties:
        displayName:
          description: User-friendly display name of this Rule
          type: string
        scope:
          $ref: '#/components/schemas/ScopeInfo'
        trigger:
          $ref: '#/components/schemas/TriggerInfo'
        options:
          $ref: '#/components/schemas/ExecOptInfo'
        action:
          $ref: '#/components/schemas/ActionInfo'
      required:
      - action
      - displayName
      - scope
      type: object
    ScopeInfo:
      description: Scope info, generally divided into System-scope and Device-scope
      example:
        deviceScope:
          groupSelection:
            filteringScript: filteringScript
            directoryPath: directoryPath
            rqlQuery: rqlQuery
            recursive: true
            gatewaysOnly: true
            tags:
            - tags
            - tags
          groovySelection:
            filteringScript: filteringScript
            listingScript: listingScript
          idSelection:
            deviceIds:
            - deviceIds
            - deviceIds
        systemScope: false
      properties:
        systemScope:
          default: false
          description: If System-scope the value is <code>true</code>, otherwise <code>false</code>
          type: boolean
        deviceScope:
          $ref: '#/components/schemas/DeviceScopeInfo'
      required:
      - deviceScope
      type: object
    TriggerElInfo:
      description: Should be a groovy script that could be evaluated to boolean value
        <code>true</code> or <code>false</code>.
      example:
        condition: condition
        triggerEvent:
          mode: event-driven (device.events.trigger), timer-driven (trigger.cron)
            or manual-fire (mme.manual.trigger)
          activationParams: activationParams
          eventType: eventType
      properties:
        condition:
          description: A groovy script that will be executed and expected to return
            a boolean result or it might be a json query filter that will be matched
            against the Rule-fire event
          type: string
        triggerEvent:
          $ref: '#/components/schemas/TriggerEventInfo'
      type: object
    TriggerEventInfo:
      description: Abstraction for event that fires a Rule
      example:
        mode: event-driven (device.events.trigger), timer-driven (trigger.cron) or
          manual-fire (mme.manual.trigger)
        activationParams: activationParams
        eventType: eventType
      properties:
        eventType:
          type: string
        mode:
          description: The trigger type - corresponding to a trigger provider available
            in the system
          example: event-driven (device.events.trigger), timer-driven (trigger.cron)
            or manual-fire (mme.manual.trigger)
          type: string
        activationParams:
          description: The input required by the respective trigger provider in order
            to start generating Rule firing events. For mme.manual.trigger mode this
            is not required
          type: string
      required:
      - activationParams
      - mode
      type: object
    TriggerInfo:
      example:
        triggerElements:
        - condition: condition
          triggerEvent:
            mode: event-driven (device.events.trigger), timer-driven (trigger.cron)
              or manual-fire (mme.manual.trigger)
            activationParams: activationParams
            eventType: eventType
        - condition: condition
          triggerEvent:
            mode: event-driven (device.events.trigger), timer-driven (trigger.cron)
              or manual-fire (mme.manual.trigger)
            activationParams: activationParams
            eventType: eventType
        generalCondition: generalCondition
      properties:
        generalCondition:
          description: Should be a groovy script that could be evaluated to boolean
            value <code>true</code> or <code>false</code>.
          type: string
        triggerElements:
          description: Should be a groovy script that could be evaluated to boolean
            value <code>true</code> or <code>false</code>.
          items:
            $ref: '#/components/schemas/TriggerElInfo'
          type: array
      required:
      - triggerElements
      type: object
    RuleStatusInfo:
      example:
        displayName: displayName
        trigger:
          triggerElements:
          - condition: condition
            triggerEvent:
              mode: event-driven (device.events.trigger), timer-driven (trigger.cron)
                or manual-fire (mme.manual.trigger)
              activationParams: activationParams
              eventType: eventType
          - condition: condition
            triggerEvent:
              mode: event-driven (device.events.trigger), timer-driven (trigger.cron)
                or manual-fire (mme.manual.trigger)
              activationParams: activationParams
              eventType: eventType
          generalCondition: generalCondition
        triggersCount: 7
        props:
        - props
        - props
        cancelCount: 2
        involvedCount: 6
        scope:
          deviceScope:
            groupSelection:
              filteringScript: filteringScript
              directoryPath: directoryPath
              rqlQuery: rqlQuery
              recursive: true
              gatewaysOnly: true
              tags:
              - tags
              - tags
            groovySelection:
              filteringScript: filteringScript
              listingScript: listingScript
            idSelection:
              deviceIds:
              - deviceIds
              - deviceIds
          systemScope: false
        options:
          overlapOption: 1
          timeConstraint: timeConstraint
          autoDisable: true
          concurrencyLimit: 3
          oncePerDevice: true
          concurrencyTimeout: 2
        successCount: 1
        action:
          actionType: groovy
          actionDef: '{"groovyScript":"write action script here ..."}'
        nextTimeTrigger: 9
        state: 0
        stateDescription: stateDescription
        warningCount: 5
        ruleId: ruleId
        user: user
        fullStatus: true
        errorCount: 5
      properties:
        displayName:
          description: User-friendly display name of this Rule
          type: string
        ruleId:
          description: Rule identifier
          type: string
        state:
          format: int32
          type: integer
        stateDescription:
          type: string
        involvedCount:
          description: The count of involved devices with the given execution status.
          format: int32
          type: integer
        successCount:
          description: The count of involved devices with FINISHED_SUCCESS(0) status.
          format: int32
          type: integer
        warningCount:
          description: The count of involved devices with  FINISHED_WARNING(1) status.
          format: int32
          type: integer
        errorCount:
          description: The count of involved devices with  FINISHED_ERROR(2) status.
          format: int32
          type: integer
        cancelCount:
          description: The count of involved devices with  FINISHED_CANCELED(3) status.
          format: int32
          type: integer
        triggersCount:
          format: int32
          type: integer
        nextTimeTrigger:
          format: int64
          type: integer
        user:
          description: User
          type: string
        props:
          description: Custom properties assigned to this Rule.
          items:
            description: Custom properties assigned to this Rule.
            format: byte
            type: string
          type: array
        scope:
          $ref: '#/components/schemas/ScopeInfo'
        trigger:
          $ref: '#/components/schemas/TriggerInfo'
        options:
          $ref: '#/components/schemas/ExecOptInfo'
        action:
          $ref: '#/components/schemas/ActionInfo'
        fullStatus:
          type: boolean
      required:
      - action
      - displayName
      - involvedCount
      - ruleId
      - scope
      type: object
    Properties:
      example:
        append: true
        properties:
          key: '{}'
      properties:
        append:
          type: boolean
        properties:
          additionalProperties:
            type: object
          type: object
      type: object
    TaskStatusInfo:
      example:
        nextResume: 3
        isPaused: true
        finishTime: 1
        paused: true
        displayName: displayName
        props:
        - props
        - props
        launchTime: 6
        nextPause: 2
        cancelCount: 9
        scopeInfo:
          deviceScope:
            groupSelection:
              filteringScript: filteringScript
              directoryPath: directoryPath
              rqlQuery: rqlQuery
              recursive: true
              gatewaysOnly: true
              tags:
              - tags
              - tags
            groovySelection:
              filteringScript: filteringScript
              listingScript: listingScript
            idSelection:
              deviceIds:
              - deviceIds
              - deviceIds
          systemScope: false
        involvedCount: 5
        optInfo:
          overlapOption: 1
          timeConstraint: timeConstraint
          autoDisable: true
          concurrencyLimit: 3
          oncePerDevice: true
          concurrencyTimeout: 2
        ruleInfo:
          displayName: displayName
          scope:
            deviceScope:
              groupSelection:
                filteringScript: filteringScript
                directoryPath: directoryPath
                rqlQuery: rqlQuery
                recursive: true
                gatewaysOnly: true
                tags:
                - tags
                - tags
              groovySelection:
                filteringScript: filteringScript
                listingScript: listingScript
              idSelection:
                deviceIds:
                - deviceIds
                - deviceIds
            systemScope: false
          options:
            overlapOption: 1
            timeConstraint: timeConstraint
            autoDisable: true
            concurrencyLimit: 3
            oncePerDevice: true
            concurrencyTimeout: 2
          action:
            actionType: groovy
            actionDef: '{"groovyScript":"write action script here ..."}'
          trigger:
            triggerElements:
            - condition: condition
              triggerEvent:
                mode: event-driven (device.events.trigger), timer-driven (trigger.cron)
                  or manual-fire (mme.manual.trigger)
                activationParams: activationParams
                eventType: eventType
            - condition: condition
              triggerEvent:
                mode: event-driven (device.events.trigger), timer-driven (trigger.cron)
                  or manual-fire (mme.manual.trigger)
                activationParams: activationParams
                eventType: eventType
            generalCondition: generalCondition
        successCount: 5
        action:
          actionType: groovy
          actionDef: '{"groovyScript":"write action script here ..."}'
        state: 0
        stateDescription: stateDescription
        warningCount: 2
        ruleId: ruleId
        user: user
        taskId: taskId
        errorCount: 7
      properties:
        taskId:
          description: Task identifier
          type: string
        ruleId:
          description: Rule identifier
          type: string
        state:
          description: State of this Task
          format: int32
          type: integer
        stateDescription:
          description: Description of the Task state.
          type: string
        launchTime:
          description: Task launch time
          format: int64
          type: integer
        finishTime:
          description: Task finish time
          format: int64
          type: integer
        involvedCount:
          description: Count of involved devices with given execution status in this
            Task.
          format: int32
          type: integer
        successCount:
          description: Count of involved devices with FINISHED_SUCCESS(0) status
          format: int32
          type: integer
        warningCount:
          description: Count of involved devices with FINISHED_WARNING(1) status
          format: int32
          type: integer
        errorCount:
          description: Count of involved devices with FINISHED_ERROR(2) status
          format: int32
          type: integer
        cancelCount:
          description: Count of involved devices with FINISHED_CANCELED(3) status
          format: int32
          type: integer
        isPaused:
          type: boolean
        nextResume:
          description: Time at which the execution will be resumed.
          format: int64
          type: integer
        nextPause:
          description: Time at which the execution will be paused.
          format: int64
          type: integer
        user:
          description: User
          type: string
        props:
          description: Custom properties assigned to this Task.
          items:
            description: Custom properties assigned to this Task.
            format: byte
            type: string
          type: array
        scopeInfo:
          $ref: '#/components/schemas/ScopeInfo'
        optInfo:
          $ref: '#/components/schemas/ExecOptInfo'
        action:
          $ref: '#/components/schemas/ActionInfo'
        displayName:
          description: A User-friendly display name of this Task.
          type: string
        ruleInfo:
          $ref: '#/components/schemas/RuleInfo'
        paused:
          description: ' Task execution is currently paused due to time-constraint
            restrictions.'
          type: boolean
      required:
      - action
      - finishTime
      - involvedCount
      - launchTime
      - optInfo
      - scopeInfo
      - state
      - stateDescription
      type: object
    RestTaskInfo:
      example:
        scopeInfo:
          deviceScope:
            groupSelection:
              filteringScript: filteringScript
              directoryPath: directoryPath
              rqlQuery: rqlQuery
              recursive: true
              gatewaysOnly: true
              tags:
              - tags
              - tags
            groovySelection:
              filteringScript: filteringScript
              listingScript: listingScript
            idSelection:
              deviceIds:
              - deviceIds
              - deviceIds
          systemScope: false
        displayName: displayName
        optInfo:
          timeConstraint: timeConstraint
          concurrencyLimit: 0
        action:
          actionType: groovy
          actionDef: '{"groovyScript":"write action script here ..."}'
      properties:
        displayName:
          description: User-friendly display name of this Task
          type: string
        action:
          $ref: '#/components/schemas/ActionInfo'
        scopeInfo:
          $ref: '#/components/schemas/ScopeInfo'
        optInfo:
          $ref: '#/components/schemas/TaskExecOptInfo'
      type: object
    TaskExecOptInfo:
      description: Execution options define execution behavior of Tasks and Rules
      example:
        timeConstraint: timeConstraint
        concurrencyLimit: 0
      properties:
        concurrencyLimit:
          default: -1
          description: Restricts the maximum number of devices concurrently executing
            a Task or Rule.
          format: int32
          type: integer
        timeConstraint:
          description: 'Time-schedule is permitted for the Task to act. Time schedule
            constraint supplied as Cron-expression. <code>Example:</code> <li/>* *
            9-17 ? * MON-FRI: defines work time to be on working days (Monday to Friday)
            between 9.00-17.00h<li/>* * 00-01 * * ?: defines work to be time every
            day between 00-01 in the morning.<li/>* * * 01 * ?: defines work time
            to be on the 1st day of each month .'
          type: string
      required:
      - concurrencyLimit
      - timeConstraint
      type: object
    AttributeObject:
      example:
        path: path
        value: '{}'
      properties:
        path:
          description: Attribute path
          type: string
        value:
          description: Attribute value
          type: object
      required:
      - path
      - value
      type: object
    DefinitionIdentifier:
      description: Feature definition identifiers
      example:
        namespace: namespace
        name: name
        fullyQualifiedIdentifier: fullyQualifiedIdentifier
        version: version
      properties:
        namespace:
          description: Feature definition namespace
          type: string
        name:
          description: Feature definition name
          type: string
        version:
          description: Feature definition version
          type: string
        fullyQualifiedIdentifier:
          description: Feature definition namespace:name:value
          type: string
      required:
      - fullyQualifiedIdentifier
      - name
      - namespace
      - version
      type: object
    Device:
      example:
        identifier:
          namespace: namespace
          id: id
        features:
        - id: id
          definitions:
          - namespace: namespace
            name: name
            fullyQualifiedIdentifier: fullyQualifiedIdentifier
            version: version
          - namespace: namespace
            name: name
            fullyQualifiedIdentifier: fullyQualifiedIdentifier
            version: version
          properties:
          - id: id
            category: category
            value: '{}'
          - id: id
            category: category
            value: '{}'
        - id: id
          definitions:
          - namespace: namespace
            name: name
            fullyQualifiedIdentifier: fullyQualifiedIdentifier
            version: version
          - namespace: namespace
            name: name
            fullyQualifiedIdentifier: fullyQualifiedIdentifier
            version: version
          properties:
          - id: id
            category: category
            value: '{}'
          - id: id
            category: category
            value: '{}'
        policyId: policyId
        modified: 6
        attributes:
        - path: path
          value: '{}'
        - path: path
          value: '{}'
        attribute: '{}'
        gatewayId: gatewayId
        revision: 0
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        gatewayId:
          description: Gateway identifier this device is attached to
          type: string
        policyId:
          description: Policy identifier
          type: string
        revision:
          description: Device revision
          format: int64
          type: integer
        modified:
          description: Modified timestamp
          format: int64
          type: integer
        attributes:
          description: The attributes that describe this entity
          items:
            $ref: '#/components/schemas/AttributeObject'
          type: array
        features:
          description: Device features
          items:
            $ref: '#/components/schemas/Feature'
          type: array
        attribute:
          type: object
          writeOnly: true
      required:
      - identifier
      type: object
    Feature:
      description: Device features
      example:
        id: id
        definitions:
        - namespace: namespace
          name: name
          fullyQualifiedIdentifier: fullyQualifiedIdentifier
          version: version
        - namespace: namespace
          name: name
          fullyQualifiedIdentifier: fullyQualifiedIdentifier
          version: version
        properties:
        - id: id
          category: category
          value: '{}'
        - id: id
          category: category
          value: '{}'
      properties:
        id:
          description: Feature identifier
          type: string
        properties:
          description: Feature properties
          items:
            $ref: '#/components/schemas/PropertyObject'
          type: array
        definitions:
          description: Feature definition identifiers
          items:
            $ref: '#/components/schemas/DefinitionIdentifier'
          type: array
      required:
      - id
      type: object
    Identifier:
      description: Unique entity identifier
      example:
        namespace: namespace
        id: id
      properties:
        namespace:
          description: Unique entity namespace
          type: string
        id:
          description: Entity id
          type: string
      required:
      - id
      - namespace
      type: object
    PropertyObject:
      description: Feature properties
      example:
        id: id
        category: category
        value: '{}'
      properties:
        id:
          description: Property identifier
          type: string
        category:
          description: Property category, e.g. status, configuration, etc
          type: string
        value:
          description: Property value
          type: object
      required:
      - id
      - value
      type: object
    Property:
      example:
        id: id
        category: category
        value: '{}'
      properties:
        id:
          description: Property identifier
          type: string
        category:
          description: Property category, e.g. status, configuration, etc
          type: string
        value:
          description: Property value
          type: object
      required:
      - id
      - value
      type: object
    Attribute:
      example:
        path: path
        value: '{}'
      properties:
        path:
          description: Attribute path
          type: string
        value:
          description: Attribute value
          type: object
      required:
      - path
      - value
      type: object
    Constraint:
      example:
        type: MIN
        value: value
      properties:
        type:
          enum:
          - MIN
          - MAX
          - STRLEN
          - REGEX
          - MIMETYPE
          - SCALING
          - DEFAULT
          - NULLABLE
          type: string
        value:
          type: string
      type: object
    FeatureDefinition:
      example:
        model:
          fileName: fileName
          statusProperties:
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          operations:
          - result:
              primitive: true
              multiple: true
              type: '{}'
            name: name
            description: description
            params:
            - name: name
              multiple: true
              description: description
              type: '{}'
              mandatory: true
              constraints:
              - type: MIN
                value: value
              - type: MIN
                value: value
            - name: name
              multiple: true
              description: description
              type: '{}'
              mandatory: true
              constraints:
              - type: MIN
                value: value
              - type: MIN
                value: value
            breakable: true
          - result:
              primitive: true
              multiple: true
              type: '{}'
            name: name
            description: description
            params:
            - name: name
              multiple: true
              description: description
              type: '{}'
              mandatory: true
              constraints:
              - type: MIN
                value: value
              - type: MIN
                value: value
            - name: name
              multiple: true
              description: description
              type: '{}'
              mandatory: true
              constraints:
              - type: MIN
                value: value
              - type: MIN
                value: value
            breakable: true
          references:
          - name: name
            namespace: namespace
            version: version
          - name: name
            namespace: namespace
            version: version
          displayName: displayName
          description: description
          id:
            name: name
            namespace: namespace
            version: version
          type: FunctionBlock
          configurationProperties:
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          faultProperties:
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          events:
          - name: name
            properties:
            - name: name
              multiple: true
              description: description
              type: '{}'
              mandatory: true
              constraints:
              - type: MIN
                value: value
              - type: MIN
                value: value
            - name: name
              multiple: true
              description: description
              type: '{}'
              mandatory: true
              constraints:
              - type: MIN
                value: value
              - type: MIN
                value: value
          - name: name
            properties:
            - name: name
              multiple: true
              description: description
              type: '{}'
              mandatory: true
              constraints:
              - type: MIN
                value: value
              - type: MIN
                value: value
            - name: name
              multiple: true
              description: description
              type: '{}'
              mandatory: true
              constraints:
              - type: MIN
                value: value
              - type: MIN
                value: value
        id:
          namespace: namespace
          name: name
          fullyQualifiedIdentifier: fullyQualifiedIdentifier
          version: version
      properties:
        id:
          $ref: '#/components/schemas/DefinitionIdentifier'
        model:
          $ref: '#/components/schemas/FunctionBlock'
      required:
      - id
      - model
      type: object
    FunctionBlock:
      description: Feature definition Function Block
      example:
        fileName: fileName
        statusProperties:
        - name: name
          multiple: true
          description: description
          type: '{}'
          mandatory: true
          constraints:
          - type: MIN
            value: value
          - type: MIN
            value: value
        - name: name
          multiple: true
          description: description
          type: '{}'
          mandatory: true
          constraints:
          - type: MIN
            value: value
          - type: MIN
            value: value
        operations:
        - result:
            primitive: true
            multiple: true
            type: '{}'
          name: name
          description: description
          params:
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          breakable: true
        - result:
            primitive: true
            multiple: true
            type: '{}'
          name: name
          description: description
          params:
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          breakable: true
        references:
        - name: name
          namespace: namespace
          version: version
        - name: name
          namespace: namespace
          version: version
        displayName: displayName
        description: description
        id:
          name: name
          namespace: namespace
          version: version
        type: FunctionBlock
        configurationProperties:
        - name: name
          multiple: true
          description: description
          type: '{}'
          mandatory: true
          constraints:
          - type: MIN
            value: value
          - type: MIN
            value: value
        - name: name
          multiple: true
          description: description
          type: '{}'
          mandatory: true
          constraints:
          - type: MIN
            value: value
          - type: MIN
            value: value
        faultProperties:
        - name: name
          multiple: true
          description: description
          type: '{}'
          mandatory: true
          constraints:
          - type: MIN
            value: value
          - type: MIN
            value: value
        - name: name
          multiple: true
          description: description
          type: '{}'
          mandatory: true
          constraints:
          - type: MIN
            value: value
          - type: MIN
            value: value
        events:
        - name: name
          properties:
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
        - name: name
          properties:
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
          - name: name
            multiple: true
            description: description
            type: '{}'
            mandatory: true
            constraints:
            - type: MIN
              value: value
            - type: MIN
              value: value
      properties:
        id:
          $ref: '#/components/schemas/ModelId'
        type:
          enum:
          - FunctionBlock
          - InformationModel
          - DataType
          type: string
        displayName:
          type: string
        description:
          type: string
        fileName:
          type: string
        references:
          items:
            $ref: '#/components/schemas/ModelId'
          type: array
        configurationProperties:
          items:
            $ref: '#/components/schemas/ModelProperty'
          type: array
        statusProperties:
          items:
            $ref: '#/components/schemas/ModelProperty'
          type: array
        faultProperties:
          items:
            $ref: '#/components/schemas/ModelProperty'
          type: array
        events:
          items:
            $ref: '#/components/schemas/ModelEvent'
          type: array
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
      type: object
    ModelEvent:
      example:
        name: name
        properties:
        - name: name
          multiple: true
          description: description
          type: '{}'
          mandatory: true
          constraints:
          - type: MIN
            value: value
          - type: MIN
            value: value
        - name: name
          multiple: true
          description: description
          type: '{}'
          mandatory: true
          constraints:
          - type: MIN
            value: value
          - type: MIN
            value: value
      properties:
        name:
          type: string
        properties:
          items:
            $ref: '#/components/schemas/ModelProperty'
          type: array
      type: object
    ModelId:
      example:
        name: name
        namespace: namespace
        version: version
      properties:
        name:
          type: string
        namespace:
          type: string
        version:
          type: string
      type: object
    ModelProperty:
      example:
        name: name
        multiple: true
        description: description
        type: '{}'
        mandatory: true
        constraints:
        - type: MIN
          value: value
        - type: MIN
          value: value
      properties:
        mandatory:
          type: boolean
        name:
          type: string
        description:
          type: string
        type:
          type: object
        constraints:
          items:
            $ref: '#/components/schemas/Constraint'
          type: array
        multiple:
          type: boolean
      type: object
    Operation:
      example:
        result:
          primitive: true
          multiple: true
          type: '{}'
        name: name
        description: description
        params:
        - name: name
          multiple: true
          description: description
          type: '{}'
          mandatory: true
          constraints:
          - type: MIN
            value: value
          - type: MIN
            value: value
        - name: name
          multiple: true
          description: description
          type: '{}'
          mandatory: true
          constraints:
          - type: MIN
            value: value
          - type: MIN
            value: value
        breakable: true
      properties:
        name:
          type: string
        description:
          type: string
        result:
          $ref: '#/components/schemas/ReturnType'
        params:
          items:
            $ref: '#/components/schemas/Param'
          type: array
        breakable:
          type: boolean
      type: object
    Param:
      example:
        name: name
        multiple: true
        description: description
        type: '{}'
        mandatory: true
        constraints:
        - type: MIN
          value: value
        - type: MIN
          value: value
      properties:
        mandatory:
          type: boolean
        name:
          type: string
        description:
          type: string
        type:
          type: object
        constraints:
          items:
            $ref: '#/components/schemas/Constraint'
          type: array
        multiple:
          type: boolean
      type: object
    ReturnType:
      example:
        primitive: true
        multiple: true
        type: '{}'
      properties:
        type:
          type: object
        multiple:
          type: boolean
        primitive:
          type: boolean
      type: object
    Gateway:
      example:
        identifier:
          namespace: namespace
          id: id
        features:
        - id: id
          definitions:
          - namespace: namespace
            name: name
            fullyQualifiedIdentifier: fullyQualifiedIdentifier
            version: version
          - namespace: namespace
            name: name
            fullyQualifiedIdentifier: fullyQualifiedIdentifier
            version: version
          properties:
          - id: id
            category: category
            value: '{}'
          - id: id
            category: category
            value: '{}'
        - id: id
          definitions:
          - namespace: namespace
            name: name
            fullyQualifiedIdentifier: fullyQualifiedIdentifier
            version: version
          - namespace: namespace
            name: name
            fullyQualifiedIdentifier: fullyQualifiedIdentifier
            version: version
          properties:
          - id: id
            category: category
            value: '{}'
          - id: id
            category: category
            value: '{}'
        policyId: policyId
        modified: 6
        attributes:
        - path: path
          value: '{}'
        - path: path
          value: '{}'
        attribute: '{}'
        gatewayId: gatewayId
        revision: 0
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        gatewayId:
          description: Gateway identifier this device is attached to
          type: string
        policyId:
          description: Policy identifier
          type: string
        attributes:
          description: The attributes that describe this entity
          items:
            $ref: '#/components/schemas/AttributeObject'
          type: array
        features:
          description: Device features
          items:
            $ref: '#/components/schemas/Feature'
          type: array
        revision:
          description: Device revision
          format: int64
          type: integer
        modified:
          description: Modified timestamp
          format: int64
          type: integer
        attribute:
          type: object
          writeOnly: true
      required:
      - identifier
      type: object
    Credentials:
      description: ' Credentials are used to authenticate Devices connecting to the
        adapter. They could be of a certain type which indicates which authentication
        mechanism the credentials can be used with'
      example:
        secret: secret
        type: HASHED_PASSWORD
        authId: authId
        enabled: true
      properties:
        type:
          description: |-
            The type of credentials. Values could be on of:  <ul>
              <li>HASHED_PASSWORD - A credential type for storing a password for a device</li>
              <li>PRE_SHARED_SECRET - A credential type for storing a Pre-shared Key as used in TLS handshakes</li>
              <li>CERTIFICATE - A credential type for storing the formatted subject DN of a client certificate that is used to authenticate the device as part of a TLS handshake</li>
             </ul>
          enum:
          - HASHED_PASSWORD
          - PRE_SHARED_SECRET
          - CERTIFICATE
          type: string
        authId:
          description: The identity that the device should be authenticated as
          type: string
        secret:
          description: Secret to authenticate the device against(valid for HASHED_PASSWORD
            and PRE_SHARED_SECRET type)
          type: string
        enabled:
          description: If set to false the credentials are not supposed to be used
            to authenticate devices any longer.
          type: boolean
      required:
      - type
      type: object
    RegisterInfo:
      example:
        directoryPath: directoryPath
        credentials:
          secret: secret
          type: HASHED_PASSWORD
          authId: authId
          enabled: true
        attributes:
        - path: path
          value: '{}'
        - path: path
          value: '{}'
      properties:
        credentials:
          $ref: '#/components/schemas/Credentials'
        directoryPath:
          description: Directory path
          type: string
        attributes:
          description: Attribute values
          items:
            $ref: '#/components/schemas/AttributeObject'
          type: array
      type: object
    Tag:
      example:
        identifier:
          namespace: namespace
          id: id
        name: name
        attributes:
        - path: path
          value: '{}'
        - path: path
          value: '{}'
        attribute: '{}'
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        attributes:
          description: The attributes that describe this entity
          items:
            $ref: '#/components/schemas/AttributeObject'
          type: array
        name:
          description: The name of this entity
          type: string
        attribute:
          type: object
          writeOnly: true
      required:
      - identifier
      - name
      type: object
    Directory:
      example:
        identifier:
          namespace: namespace
          id: id
        path: path
        name: name
        attributes:
        - path: path
          value: '{}'
        - path: path
          value: '{}'
        attribute: '{}'
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        attributes:
          description: The attributes that describe this entity
          items:
            $ref: '#/components/schemas/AttributeObject'
          type: array
        name:
          description: The name of this entity
          type: string
        path:
          description: The path of this directory in the directory tree
          type: string
        attribute:
          type: object
          writeOnly: true
      required:
      - identifier
      - name
      - path
      type: object
    Parameters:
      example:
        identifier:
          namespace: namespace
          id: id
        name: name
        attributes:
        - path: path
          value: '{}'
        - path: path
          value: '{}'
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        attributes:
          items:
            $ref: '#/components/schemas/AttributeObject'
          type: array
        name:
          description: User-friendly name
          type: string
      required:
      - name
      type: object
    DirectoryParameters:
      example:
        identifier:
          namespace: namespace
          id: id
        parentPath: parentPath
        name: name
        attributes:
        - path: path
          value: '{}'
        - path: path
          value: '{}'
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        attributes:
          items:
            $ref: '#/components/schemas/AttributeObject'
          type: array
        name:
          description: User-friendly name
          type: string
        parentPath:
          description: Parent directory path
          type: string
      required:
      - name
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      description: JSON Web Token issued by a supported OAuth 2.0 Identity Provider.
      scheme: bearer
      type: http
    refreshToken:
      description: Refresh token issued by a supported OAuth 2.0 Identity Provider.
      in: header
      name: x-refresh-token
      type: apiKey
    SuiteAuth:
      description: Refresh token issued by the Bosch IoT Suite OAuth 2.0 Authorization
        Server.
      flows:
        clientCredentials:
          scopes:
            offline: Offline Refresh Tokens
            openid: OpenID
          tokenUrl: https://access.bosch-iot-suit.com/v2/token
      type: oauth2
